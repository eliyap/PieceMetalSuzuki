// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: StartRun.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct StartRunSerial {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tail: Int32 = 0

  var head: Int32 = 0

  var from: UInt32 = 0

  var to: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension StartRunSerial: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension StartRunSerial: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "StartRunSerial"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tail"),
    2: .same(proto: "head"),
    3: .same(proto: "from"),
    4: .same(proto: "to"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularSInt32Field(value: &self.tail) }()
      case 2: try { try decoder.decodeSingularSInt32Field(value: &self.head) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.from) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.to) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.tail != 0 {
      try visitor.visitSingularSInt32Field(value: self.tail, fieldNumber: 1)
    }
    if self.head != 0 {
      try visitor.visitSingularSInt32Field(value: self.head, fieldNumber: 2)
    }
    if self.from != 0 {
      try visitor.visitSingularUInt32Field(value: self.from, fieldNumber: 3)
    }
    if self.to != 0 {
      try visitor.visitSingularUInt32Field(value: self.to, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: StartRunSerial, rhs: StartRunSerial) -> Bool {
    if lhs.tail != rhs.tail {return false}
    if lhs.head != rhs.head {return false}
    if lhs.from != rhs.from {return false}
    if lhs.to != rhs.to {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
